---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: datadog-agent-cluster-check
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datadog-agent-cluster-check
spec:
  selector:
    matchLabels:
      app: datadog-agent-cluster-check
  replicas: 1
  template:
    metadata:
      labels:
        app: datadog-agent-cluster-check
      name: datadog-agent-cluster-check
    spec:
      # affinity and tolerations to only schedule on the master node
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/master
                  operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      serviceAccountName: datadog-agent-cluster-check
      containers:
      - image: datadog/agent:latest
        imagePullPolicy: Always
        name: datadog-agent-cluster-check
        env:
          - name: DD_API_KEY
            valueFrom:
              secretKeyRef:
                name: datadog-api-key
                key: token
          - name: DD_SITE
            # Set DD_SITE to datadoghq.eu to send your Agent data to the Datadog EU site
            value: "datadoghq.com"
          - name: KUBERNETES
            value: "true"
          - name: DD_EXTRA_CONFIG_PROVIDERS
            value: "clusterchecks"
          - name: DD_CLUSTER_AGENT_ENABLED
            value: "true"
          - name: DD_LOGS_ENABLED
            value: "true"
          - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
            value: "true"
          - name: DD_CLUSTER_AGENT_AUTH_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: datadog-auth-token
          - name: DD_KUBERNETES_KUBELET_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
          - name: dockersocket
            mountPath: /var/run/docker.sock
          - name: procdir
            mountPath: /host/proc
            readOnly: true
          - name: cgroups
            mountPath: /host/sys/fs/cgroup
            readOnly: true
          - name: k8s-logs
            mountPath: /var/log/kubernetes/apiserver
          - mountPath: /conf.d/kube_audit.yaml
            # Log based cluster checks are not supported.
            name: control-plane-yaml
            subPath: kube_audit.yaml
        livenessProbe:
          exec:
            command:
            - ./probe.sh
          initialDelaySeconds: 15
          periodSeconds: 5
      volumes:
        - hostPath:
            path: /var/run/docker.sock
          name: dockersocket
        - hostPath:
            path: /proc
          name: procdir
        - hostPath:
            path: /var/log/pods
          name: logpodpath
        # Docker runtime directory, replace this path with your container runtime logs directory, or remove this configuration if `/var/log/pods` is not a symlink to any other directory.
        - hostPath:
            path: /var/lib/docker/containers
          name: logcontainerpath
        - hostPath:
            path: /sys/fs/cgroup
          name: cgroups
        - hostPath:
            path: /var/log/kubernetes/apiserver
          name: k8s-logs
        - configMap:
            defaultMode: 420
            name: control-plane-yaml
          name: control-plane-yaml
